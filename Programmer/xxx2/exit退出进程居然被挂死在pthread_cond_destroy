exit退出进程居然被挂死在pthread_cond_destroy
日期：2015-11-19 10:10浏览：228评论：1
昨晚遇到一个进程挂死的问题，调用exit后，进程居然被挂死，而且是挂在释放函数上，这个有点奇怪，相关的上下文信息，一些有价值的上下文或者平时没有留意的概念，具体如下：

 

ClusterManager进程在Fork后，子进程执行完毕调用exit，子进程可能被挂死，自进公司后，此部分代码基本都没变化，查看挂死的堆栈，是在释放消费者线程的条件变量被挂死了，堆栈如下：

#0  0x00002ba523afa45d in pthread_cond_destroy@@GLIBC_2.3.2 ()

#1  0x00000000004176f2 in INFOX_CloseHandle

#2  0x0000000000435292 in CEffectiveManager::~CEffectiveManager

#3  0x0000000000435c17 in CBaseManager::~CBaseManager

#4  0x000000000042deb3 in CAlertManager::~CAlertManager

#5  0x000000000042a979 in AlertExit ()

#6  0x00000000004303bf in CAlertAutoExit::~CAlertAutoExit

#7  0x00002ba52532b7f5 in __run_exit_handlers () from /lib64/libc.so.6

#8  0x00002ba52532b845 in exit () from /lib64/libc.so.6

#9  0x000000000040fb6d in CApplication::ForkProcess (this=0x6c4160)

#10 0x000000000040fe62 in CApplication::Start (this=0x6c4160, bNeedSleep=1)

#11 0x00000000004120c9 in CApplication::Restart

#12 0x0000000000412166 in CApplication::DoRestart

#13 0x00000000004123cf in CApplication::AppExceptMng

#14 0x0000000000412781 in CApplication::CheckApplication

#15 0x000000000041282d in CApplication::CheckThreadFunc

#16 0x0000000000412868 in CApplication::StCheckThreadFunc

#17 0x00002ba523af67b6 in start_thread () from /lib64/libpthread.so.0            

 

1.         为啥调用pthread_cond_destroy释放条件变量，会被挂死呢？

查看条件变量，发现其中一个变量__nwaiters = 2，也就是有线程在等待条件事件。再查看API pthread_cond_destroy相关说明，若有线程等待条件变量，则要等待线程退出等待后才会返回。挂住的原因基本找到，但是在释放前，显示地停止了线程的，AlertExit函数的代码如下：

void AlertExit(void)

{              

    if (0 == g_nAlertRefCount){return;}

    INFOX_InterlockedDecrement((int*)&g_nAlertRefCount);

    if (0 == g_nAlertRefCount)

    {

        g_pAlertManager->Destroy();//停止消费者线程

        delete g_pAlertManager;//释放消费者对象

        g_pAlertManager = NULL;

    }

}

2、显示地停止了线程，为啥还会存在线程等待呢？

回溯堆栈，是exit函数触发了进程退出，而exit函数触发了静态变量CAlertAutoExit的析构函数，此析构函数调用AlertExit。是否在调用AlertExit时，线程被异常终止呢？

查看exit的说明，exit会终止线程，也会调用静态变量与析构函数的析构函数，如何终止线程的呢？上述过程的先后顺序又是怎样的呢？MM做测试后，发现会先终止线程，随后调用静态与全局变量的析构函数，而终止线程时，线程及其可能阻塞在pthread_cond_wait，等待生产者投递消息，这可能导致条件变量没有等到pthread_cond_wait函数返回，线程就被终止了，但是条件变量的线程等待队列没有被清0，而调用释放函数被挂死。

 

3、总结

1)      exit与terminate_thread会直接终止线程，需要特别留意直接终止线程带来的负面影响。

exit调用，存在大量不确定性，线程可能等待条件变量，也可能占住锁，线程异常终止时，释放代码不会被调用。故调用exit后，不能默认触发任何的函数调用操作，除非显示注册了OnExit回调函数。

2)      静态全局变量的析构函数的处理要谨慎，尽量不要涉及到其它对象的调用

此处代码的作者是想自动释放一个公共资源，故申明了一个静态变量，在其析构函数中做释放操作。析构函数的这种默认行为，在C++被应用于方方面面，但此处在静态变量就有点小聪明，有很大的隐患。静态变量与全局变量的初始化和析构，必须要是有明确定义的时序关系的，最好不要牵扯到其它的上下文，才能确保其安全。

3)      pthread_cond_destroy API也有陷阱

此API是有陷阱或者隐晦的操作，跟常识有差别， delete怎么能挂住呢？或者有点多此一举，delete的职责要单一，显示地调用delete，调用者明显要确保调用时，没有地方在使用它了，否则，这个API是有陷阱的，当然如果有良好的雷同垃圾回收机制，不需要显示调用当然就更好了。
