软件开发质量和效率为啥低和相关建议，欢迎拍砖
日期：2012-11-01 13:30浏览：2689评论：36
本文原标题是“从责权利角度分析软件任职通道为何不畅通”，公司不可能让软件研发人员只悉心专研技术，而不能创造更大价值，唯有质量和效率提高了，创造的价值占比大，才可能走通。故显然要回答如何提高质量和效率，而技能提高是其中一个要素，还需要更系统解答，这就要分析团队的运作模式，承担的责任、权利和创造出的价值方面的剖析，围绕此，重新组织本文。

 

本文的观点概要：

当前开发模式：把软件过程应该具备的综合性知识和技能，分割成若干职责赋予给不同角色，每种角色要求的技能相对较低或者先天不健全，从而出现如下情况：

1 每个角色要求的素质相对低了，在自己环节内构件相应的交付件的质量本身也会低，在整合成端到端的交付件又会更低。
2 角色间职责有重叠，就会有重复上的浪费，还有大量管理协调成本，尤其是对变化管理，比如前段环节发生变化时，为啥整个链条很抗拒，因为仅仅管理协调成本就很高昂，更别说每个环节是否准备好变化。
3 切分过细，职责有重叠，必然就有遗漏，遗漏的地方积累的技术债务越来越多，比如需求如洪水，有PO角色去需求管控，而设计与实现脱节，识别出MDE角色，可是后期的工具、方法、自动化构建、测试、资料、升级、维护效率低和质量度量等，谁去负责？这些债务也会积累到大家无法忍受的地步，需要无数行政上指派的专项任务来清理，这个成本是否太高昂。

结果：导致各项管理举措的推出，以提高质量和效率，最终演变为管人，而不是基于信任的管事，大部分成本就脱离了做事本身或者未创造价值（如解决问题、升级等不创造价值），管控协调成本越来越高，而其初衷是达成质量和效率的提高，可结果事与愿违，就跟掉进沼泽，越挣扎陷得越深。

所以质量和效率得不到提高，创造的价值就小，人的技能和评价也无法得到持续提高，自然此路不通。如何走通呢？唯有解决了质量和效率问题，产出更大价值，软件开发岗位才能走通。破题思路：若站在整个工程的角度来考量，需要的是端到端的够建力，也就是软件工程师，要具备综合性的T性素质：要有设计、编码和测试方面的深度，同时要具备分析、架构、工具、方法、测试和文档化等方面的宽度。不排除开发过程中机械性活动需要相对级别较低人员，但是软件中最具有创造性的部分，需要高技能的人才，而不是用人海战术去弥补综合素质的不足。

 


最近比较火热的博文http://3ms.huawei.com/hi/blog/57551_1098655.html我司为何缺少代码精英？文中不少有价值的观点，引发了许多思考。不过个人不大赞同代码精英这个词，代码或编码概念相对狭隘些，在中国还具有一定贬义，容易带来误解，比如高中生都可以编码，可以说是对的，而反对的人基于的立场是设计+编码，即使加上设计也是相对狭隘。这就是角色割裂带来的，我司缺少的是软件工程师精英，软件工程师才是基石。

详细分析参考如下：

 

一、简介

关于软件类任职，软件类任职标准优化小组成员反馈了许多有益建议，而各开发论坛也无数达人提及，利用中午时间，总结一下这几天的讨论和邮件，抛个砖，期望能够得到更多人员的反馈。先抛几个可能被反复提及的问题：

1 软件类的个人技术、任职和绩效，很快有天花板，为什么?

2 代码构建本身是高效率的吗？为什么？

3 代码构建的后端，测试/资料/维护等是高效率吗？为什么？

4 软件类高端岗位工作职责是什么？应该具有怎样的素养？

5 如何评价产出？

关于这些问题，可以列出一大摞原因，细想一下，很多原因可能只是现象，非本质。要溯本才能求真，显然要剖析基层业务团队运作和涉及到的责权利，从此两个角度的剖析如下，看能否系统回答或部分回答http://3ms.huawei.com/hi/group/7233/thread_283043.html打通软件通道瓶颈在哪儿？其实本文更想回答软件开发质量和效率为啥低。

 

二、先看看产品或业务部的组成

  以我所工作的产品部来看，分为印度与深圳两个团队，深圳团队组成：设计组（3~4名）、开发组（3个小组3个PL，每个组近10人）、测试组（19人）、维护优化组（近10人）和资料组，再加若干合作员工。  每项专项职责可能都会有对应的角色，是经典的软件瀑布模式和软件工程的分类法。整个团队非常优秀，是一个持续打硬仗的团队。

三、再看软件人员在产品整个生命周期中承担的职责

  软件类职责：按照设计组的规格，输出软件，交给测试组验证后发布。每项专项职责可能都会有对应的角色，是经典的软件瀑布模式的分类法，按照此定义，软件类员工误解为编码。不过项目运作时会灵活一些，比如又识别出MDE的角色或者有经验的开发人员或PL，可以做一些需求、设计或重构类工作。

  软件类的权利：此处的权不是管人的权，而是做事的宽度和自由度，基于战略层面的产品生命周期和策略层面的项目交付来度量软件类员工的做事权利，显然在整个生命周期中只占据一个很小的片段。

  软件类的利益：这样的产出，可能说不上在产品整个生命周期中的价值占比，在项目端到端交付中，普遍也不那么重要。

四、整个生命周期和端到端的项目交付，被割裂出若干职责，再剖析，导出如下现状：

1 很自然绩效和技能都不需要高级别

整个产品生命周期中，大多数的活动说不上多至关重要（重要意味产出的价值占比大，或者意味着缺少某人某角色就玩不转了），所以绩效评价也不需要高端。

2结果容易度量，但内在品质和过程缺乏评价，也缺乏相应角色，而这在整个生命周期中，这是构成效率的关键，缺失当然会导致质量和效率低

比如可复用性、可维护性、可测试性、开发者测试、便于自动化构建、便于资料写作、便于升级、便于问题定位和便于后续项目的扩展等不容易度量的质量属性，由谁去负责？怎么评价？

3 很自然整个系统端到端的交付质量和效率也是很低下的

每个人局限在自己小圈子内构建相应的交付件，而这与产品整个生命周期的长期可维护性质量和效率可能并不匹配，同时技术直级并不高，产出的质量和效率自然不高，也无形增加了许多管理协调成本。

4 质量和效率低，不是缺少角色，是角色太多，增加角色可能无法治本

解决途径通常如下：

首先容易涌现成果可显示化的救火英雄，比如性能提升多少倍和熬夜攻关了某问题等，呼呼救火英雄，这是不是效率低下的一个现象？救火英雄是否应该是技术人员的标杆呢？

或者像识别出MDE和责任田等角色，以弥补守护模块架构的缺位一样。进一步识别出雷同MDE的新角色？Cover住可复用性、可维护性、可测试性、开发者测试、便于自动化构建、便于资料写作、便于升级、便于问题定位和便于后续项目的扩展等对应的角色，基础部门岂不越来越臃肿低效，创造价值低，又会进一步导致通道不通。

5 封闭在自己的一亩三分地，新技术、新方法和新工具等难以落地在业务团队，这进一步制约了人的技能提升，同时导致开发效率长期原地踏步。再结合封闭在业务部门的某个环节，又很容易导出技术发展有天花板，在任职和绩效评价方面均难以有进一步发展。

6 再从绩效评价的功利牵引角度来看：软件内在品质和软件产出效率等不可显示或难以显示的成果，难以量化成果，难以引起重视或得到客观评价。而对于代码产量、问题解决、公关和性能提升等可显示的成果，更容易得到绩效评价团队的首肯。

举例：刚进公司时，由于经验的欠缺，维护Delphi开发的维测中心，需要一个近十人的组，每增加一个页面要产生大量代码。随后由于有经验的员工的默默贡献，如今只需要一个人维护，这些人代码产出少，问题少，相比最初的通宵达旦甚至放弃节假日，你如何评价呢？

五、关于软件类的角色定位和应该具备素质建议

1 应站在整个工程角度来定位角色职责，软件类员工需要的是构建力，而不仅仅是编码或追加设计，也就是软件工程师是基石

编码，或者编码+设计，只是构建能力一部分，同时也不要切分为各种编程语言，软件工程师应该具有跨多语言的构建能力，才能承接各项业务挑战的可能，而不是束缚在单一语言单一模块多少年。

软件开发是一项工程，高楼大厦的施工、验证和看护有复杂的“工艺”和过程要求，砌墙不是关键点。同时软件开发相比建筑过程，更复杂更不可控，材料、工程、方法、工艺都是无法度量和计算的，其过程又具有创造性，编码和设计不能简单割裂，同时软件人员需要的是构建能力，还包含分析、设计、编码、验证、工具、方法和过程等，而不仅仅是编码，或者追加设计能力。

2 软件类人员的构成基础应该是T型人才的软件工程师

从开发过程本质需要和个人发展两个角度来看，发展应该是T性的，最初更强调单项编码技能，而在成长为独当一面的软件工程师过程中，不仅要专深，还要注重横向技能，写代码是本质工作，还涉及到领域知识、架构、设计、业务、工具和过程等，越往上走，越要加强横向技能。

站在工程角度，以软件工程师来定位角色职责可能更合适，而软件工程师是良好的构建师，在某个项目中能编码，也可以做设计，也可以做自动化测试构建，也可以做升级、维护、安装和部署等自动化或效率构建等等。

3 通道和基层管理是否就畅通了

高级别的软件工程师负责端到端的构建，相比切分为数个角色，每个低级别的角色只负责自己一个环节的构建，在效率和产出上看，一个人是可以创造数个人产生的价值，且让更多其它人聚焦其它价值点上，不会让机会点丧失，而业务部门的管理也会高效许多。也不会出现每个角色都有尴尬和抱怨，比如许多维护人员、PL和转系统的开发人员依然任职软件，他们更尴尬更无奈。

在业务基础部门，软件工程师可以出现Leader工程师或者高级工程师。而上面的产品族或者更上层，可以出现跨产品的架构师等职位，以掌舵战略方向，但单个业务部门内部，角色切分是否太细？导致对角色技能要求比较低，这样的交付效率和质量，是否能够持续？

所以，如果要求的是具有端到端的构建能力的软件工程，到无论绩效评价或者任职，就容易产生高端复合型人才。而个人技术发展，也会越来越精湛和广阔，效率产出也会越来越高。

六、基于五，谈谈高级别软件工程师或者T型人才，对整个团队的软实力构建影响，内在的软实力是构建团队氛围的关键要因，而不是行政上的管理手段。

1 代码中的标杆效应在软件开发过程中太重要，影响是潜移默化多方面的

许多代码都是临摹，需要有好的标杆、模板和参考，代码基底应该由高级别软件工程师立起来，才能激发整个开发团队对编码的追求和热情，同时也能敦促高级别人员对编码精益求精，才不至于与开发人员越来越疏远，最终才能在开发人员心目中树立地位。

2 队伍也需要自下而上的影响力，这个影响力需要有高级别的软件工程师

强调业务、架构和设计，通过此来驱动开发团队，但是开发过程还应该有自下而上的技术影响力，就需要对框架、设计、代码、测试、安装、部署和维护都能了然于胸的高级别软件工程师，才能让上层和开发人员均信服，才能竖立起整开发团队的信心和高昂斗志，推动产品持续向前发展。

3 确保整个产品生命周期和端到端的质量交付效率，需要有高级别工程师拉通整体负责，而不是切割到各个要求相对不高的人员手中

项目通常是短视的，角色太多，人太多，结果只有一种，总会有没人看护的地方，家里走的人和角色多了，就会逐步腐蚀掉代码和架构，所以需要有高级别的软件工程师去平衡短期与长期利益。此外代码构建过程难以顾及后期测试、资料、部署、使用和维护效率，此方面投入可能可能远高于代码构建的投入，这方面的角色缺位了，此部分职责是否应该是高级别的软件工程师承担？而不仅仅关注开发过程的投入。

七、总结

再分析此模式的责权利：赋予端到端构建力及交付件的职责，而不是整个过程的细小片段的代码；赋予在端到端做事的宽度与自由度，而不是诸如一个评审就要拉上近十号人争吵半天都没结果的诸多抱怨；赋予此职责和权利下高价值产出的对应利益。显然人员就能沉淀在基层，持续耕耘发展。

附录：

1、 一张IBM的基层团队的人力构成图，谢谢曹咏梅提供的此张图和探讨思路，不知道贴出来是否合适。

角色非常简单，就经理、软件工程师和测试工程师，但是软件工程师的Band（直级，10对应华为20~21级，9对应19左右）和工作经验都是相当丰富的。

http://3ms.huawei.com/hi/showimage-11009405-5712-dd698d90fc4d6a047b8ad0421605b55c.jpg

2、 从http://3ms.huawei.com/hi/group/7233/thread_283043.html摘取的角色.

爱立信：软件大类Implementation Design- Software；软件小类：Designer SW和 Other Implementation Design- Software。其实跟IBM也有点雷相近，对应Leader软件工程师和软件工程师。

 微软：分为Software Architect和Software Development Engineer，其中：Software Development Engineer关键能力要求包括：设计(关注算法优化、运行快，最少内存等)、编程、测试、调试。对产品族下的业务部门来说，个人解读此处的架构师应该对应Leader软件工程师。
