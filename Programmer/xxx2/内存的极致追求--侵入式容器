内存的极致追求--侵入式容器
日期：2016-09-08 10:09浏览：1157评论：20
      昨天在群里聊到一个有趣的话题，侵入式容器，从这个话题我们看看几大主流语言及新语言的应用能力，可能许多人没这个概念，或者语言提供了此能力，但是不会应用这么强劲的语言能力，读完，或许你能够对追求极致性能的语言能力有几分好感。

1、首先看看传统的容器与容器对象之间的关联关系，如下图：


左边是容器，典型的list与hash表，而右边是有多个关联容器的对象，这种应用场景很普遍，尤其是大容量的数据检索服务，基本上java\c++等主流编程语言都是这样构建容器与对象间的关联关系。大多数场景下可能我们不会意识到它有什么缺陷，但是在大容量存储时，尤其是数据到达百万甚至千万级时，这样的存储方式就会有如下明显的缺点：

容器与对象分离，导致大量的离散对象，对于带垃圾自动回收的语言，尤其是gc不成熟的语言，gc就会带来意想不到的停顿。同时带来大量的内存碎片，内存占用远远大于数据本身的开销。由于离散对象非常多，起停缓慢，比如对于c++，它会调用对象的析构函数。

2、怎么解决这个问题呢？个人曾经所在的消息团队，曾经300万存储，要耗费2G内存，分享下如何做到1千万只耗费1G内存的极致追求，那我们就不得不进入侵入式容器环节。

问题分析：

观察上图，会发现，容器有链指向对象，1千万容量一条链就是80M，而数据服务的容器非常多，对于千万级的存储，它就不是一个小数目。其实这个开销还只是小儿科，我们观察hash表存储了对象的key，其实这个key也会在对象中存储，而对于字符串key，这个开销就非常吓人了，比如java或c++，字符串是一个对象，就远不是8字节，查看string对象的实现，就会发现对于20字符串长度的，运行时环境最终分配的string对象实际开销可能会是它的一倍以上开销，重复一份就意味着1千万浪费200M。那我们如何改进呢？



解决思路，把链和Key直接侵入到对象，节省了key与链的存储，这就是侵入式容器技术。带来的效果：同时链和key随对象一起分配，解决了容器的node节点单独分配问题，单独分配系统会有额外的开销：运行时环境甚至内核会有链指向每个分配的内存块，甚至还有大小，同时内存分配是对齐的，不是说7字节系统就分配了7字节，也就是申请小块内存分配，额外开销比是很不划算。对于hash表，由于key侵入到对象，所以对象要提供一个比较接口实现。

3、这是否到终点了？其实不然，对象本身还是离散存储的，对象是可以紧凑存储的，java就只能到此为止了，而接下来的也就是c\c++这类可以内存布局的语言才能具备此能力了：



对象块分配，从而避免了单一对象的碎片化，进一步改善了运行时环境的内存分配开销。而链、key与对象数据可以一起做布局优化，比如由大到小顺序排放，避免了内存空洞；把bool等紧凑到位域里，而对于字符串key，优化空间更大，对象自身是非常清楚自己的每个字符串字段的格式和取值范围，那么就可以用如下的一个union结构替代（通过封装函数来访问此结构，把所有字符压入value中存放）：

union Buffer
 {
     struct TYPE
    { 
        char *pValue;//如果值的长度超过value长度，则分配一块内存来存放值，而pValue指向此值
        uint16 valueLen;
     }pointer;
     char value[DEFAULT_LEN];//存放值
 }fields;
4、做到这层优化，其实已经做到千万级存储了，是否到此为止了呢？

其实不然，既然对象是紧凑型内存布局，那么链可以修改为下标，64位下的链是8字节，4字节就足矣，而对象还有idle list，那么idle list可以使用其中一个链来串接。在某些场景下，不要小看，比如对于消息类的检索服务，消息对象索引有接近10个，也就是20个左右链，这种节省还是不能忽略的。

这就是为什么c\c++存在30年的语言，它没有好的应用库，到如今依然是主流语言的原因，有时候我们需要在性能、容量方面追求极致，而对硬件开销不妥协的语言，它会做到极致。

5、聊到这里，再随便谈谈go语言，如果在大容量存储环节，不做任何优化，这就会导致总所周知的gc问题，所以业界许多解决方案是由c\c++来托管它的内存来解决，而引入c\c++与go的混合编译，其实会带来更多问题。其实语言本身是可以克服此问题的，也就是侵入式容器。

小结：优选生产力语言，Java毫无疑问证明了它是高生产力的语言，围绕JVM的生态一直是应用最广泛的主流编程语言，但是我们也要清楚即使它的GC早已成熟，而在大容量数据存储检索服务，它并不合适。我们需要清楚每门语言的优缺点，并能利用好语言提供的能力，比如对于C\C++语言的此项能力，可能大多数人并未应用甚至未曾听说。

对于复杂领域，未来是一种多语言混合的场景，发挥每门语言的优势，在效率、成本与体验方面追求最佳的平衡点，没有银弹的语言。

 

发这篇博文的另外一个想法是期望在检索服务方面，提供更多的思路分享与探讨，参考下篇博文：http://3ms.huawei.com/hi/blog/5712_2272661.html
