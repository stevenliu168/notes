重温重构之打车拼车地铁
日期：2010-07-01 14:15浏览：707评论：13
注：下述观点全引自敏捷培训，感触非常深，非常形象地描述地架构和代码的坏味和改良过程，结合短信情况，重述一下讲师宋晓梁的观点。让大家关注一下产品代码的行车线路和持续重构的重要性，尤其是对于有较长生命周期的产品，期望可以让这项工作普遍开展起来，而不是个人行为。

 

短信由小变大，由简单到复杂，如同城市发展，以从华为下班回家举例来说明系统的演进过程。

 

一、最初打车回家，爽就一个字
系统刚开始都是简单的，就如同晚上加班后，每个人可以打车回家一样。参考下图：



但是当系统慢慢复杂，公司人多一些了，每个人打车回家的成本就太高了，那就拼车回家。

 

二、拼车回家，有人爽，有人不爽了

参考下图：



上面只有三个人（三个需求）回家，而且在一条线路上，还可以接受，但是当系统越来越复杂，人一多，拼车回家，变成大多数人就非常不爽了，参考下图：



家在前面的，没啥感觉，但在后面的，就不爽了，而且人越多（需求），不爽的人就越多，如果不幸运的是进公司晚了，那就不爽了，越到后面维护的人员就越痛苦。

 

短信系统所经历的过程何尝不是如此：开始比较简单，不同消息可以单独搞一个函数，比较爽，因为互不影响；稍微复杂一点，需求多了，明显感觉打车不行了，就开始拼车。几年前的短信代码，可以看到对于同一个过程，有7、8个类同函数；而后续的一些需求明显就不能这么搞了，就开始拼车，大家都在一条线上，搞得流程异常复杂难以维护，又容易出错。故而代码中既有需求打车的，又有拼车，复杂不堪，维护代价高昂。在这样的城市工作，开发人员肯定很压抑，而且技能从长期角度看是得不到提升的，没有归属感。

 

三、地铁或班车，让大多数人爽一点

参考下图：



当系统复杂到一定程度，可以知道修建一条地铁线路的立竿见影，此时不仅仅是修缮个别路口的问题，直接关系到架构与设计层面的问题了。而短信系统，最初尝试着抽象出整个消息生命周期的7个关键过程，铺设了地铁一号线，设置了7个站点，而不同消息就是最后一公里的差异性，故而降低了整个CGT版本的复杂性，包括尝试用此线路去做了Router和SC。但是，发展到今天，系统一直在叠加需求，明显感到有些流程又开始复杂起来了，因为一号线路照顾不到一些特殊的需求，或者能够经过，但太偏远，随着需求叠加，不爽又会越来越多地体会到。

 

四、1号地铁线路太少，同时要修好地铁线路旁的最后一公里
系统一直在叠加需求，故而需要尝试对一些复杂流程修2号甚至3号地铁线路，确保大家都在1公里内的辐射范围；而且要改善最后1公里的线路，而不是不管，确保出站后，可以根据各自需求特点，可以安全走路回家，也可方便打车或乘坐公交车。

 

系统的演进，就如同城市由小变大，要让城市现代化起来，开发人员都喜欢住进来，就需要铺设起真真惠民的路网，而且需要持续的改进和完善。若在1、2阶段的要铺设地铁，在3阶段的，可以进一步丰富完善，甚至可根据需求复杂度要求铺设路网，这是城市发展的必有之路。

而在铺设这个路网时，PO和SE，甚至PL，如果只从当前项目中来看，它的确不会带来特性的增殖，而且可能会对当前项目造成延误，但是如果我们尝试着走走现在的每条行车线路，就能感觉到真真坐车人的痛苦。

 

目前阶段，需要考虑怎么把这路网铺设起来，当然线路一定要设计好，这是至关重要重要的。而且必须要配合版本的节奏，兼顾中长期的发展和眼前交付，精诚合作，才能真真造就越来越现代化的城市，如果仅仅是修缮一下个别路口，当然是最好的，因为城市已经现代化了，期望到这一天早点到来。
